{\rtf1\ansi\ansicpg1252\cocoartf1348\cocoasubrtf170
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\fs24 \cf0 I tried to make my code as simple as possible to run, but it is a bit messy to go through (apologies).\
\
The easiest way to run is to go to \'91testStrategy.py\'92 and just run it (i.e. main function). It will generate a graph that includes both the rule-based and ML-based strategies as well as the bench mark for in-sample data. You can easily change the parameters at the top of the main function to switch to test data or to plot individual plots.\
\
Other than that, here are descriptions of what each file does:\
\
indicators.py - calculates the indicators described in part 1 and returns a Pandas Dataframe with all of the indicators\
\
rule_based.py  - takes in the pandas data frame generated by indicators.py, produces an orders file, graphs the result, and also returns back the normalized portfolio/benchmark values if you need them. Running the main function will get you straight to the results but you have to change the parameters if you want the test dataset.\
\
ML_based.py - takes in parameters described in part 3 along with a sample and test dataset generated by indicators.py, produces an orders file, graphs the result, and also returns back the normalized portfolio/benchmark values if you need them. Running the main function will get you straight to the results but you have to change the parameters if you want the test dataset.\
\
helpers.py - contains a bunch of helper functions that are critical to the functioning of the rest of the code. Basically the same thing as marketsim.py from an earlier assignment\
\
testStrategy.py - a simple way to demo the code. 10/10 would recommend.\
\
\
BagLearner.py, RTLearner.py, util.py - \'93These aren\'92t the droids you\'92re looking for\'94}